{
  "swagger": "2.0",
  "info": {
    "description": "Simple node js to manage motion servers",
    "version": "1.0.0",
    "title": "Picam-JS",
    "contact": {
      "email": "contact@darkou.fr"
    },
    "license": {
      "name": "GPL-3.0",
      "url": "https://github.com/Dbroqua/Picam-JS/blob/master/LICENSE"
    }
  },
  "host": "/",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Cameras",
      "description": "Everything about your cameras"
    },
    {
      "name": "Users",
      "description": "Manage your users"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/cameras": {
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Add a new pet to the store",
        "description": "",
        "operationId": "addPet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "Update an existing pet",
        "description": "",
        "operationId": "updatePet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },

    "/cameras/{id}": {
      "get": {
        "tags": [
          "Cameras"
        ],
        "summary": "Find camera by ID",
        "description": "Returns a single camera",
        "operationId": "getCameraById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of camera",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Camera"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Camera not found"
          },
          "500": {
            "description": "Internal error"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "basic_auth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Cameras"
        ],
        "summary": "Patch a camera",
        "description": "",
        "operationId": "patchCamera",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the pet",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Updated status of the pet",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "basic_auth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "pet"
        ],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "apikey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "basic_auth": {
      "type": "basic"
    },
    "api_key": {
      "type": "apiKey",
      "name": "apikey",
      "in": "query"
    }
  },
  "definitions": {
    "Motion": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the camera on motion, usually 0"
        },
        "adminUri": {
          "type": "string",
          "description": "Url for HTTP Based Control (like http://127.0.0.1:8081)"
        },
        "streamUri": {
          "type": "string",
          "description": "Url for Live Stream Server (like http://127.0.0.1:8082)"
        }
      }
    },
    "Definition": {
      "type": "object",
      "properties": {
        "fileIntrustion":{
          "type": "string",
          "description": "complete route for the intrusion.date (for local type only)"
        },
        "filesDirectory":{
          "type": "string",
          "description": "complete route /medias/freebox (for local type only)"
        },
        "motion": {
          "type": "object",
          "schema": {
            "$ref": "#/definitions/Motion (for local type only)"
          }
        },
        "scheme": {
          "type": "string",
          "description": "(for net type only)",
          "enum": [
            "http",
            "https"
          ]
        },
        "uri": {
          "type": "string",
          "description": "base url for remote server, like 192.168.1.2 (for net type only)"
        },
        "port": {
          "type": "integer",
          "description": "port for remote server, like 80 (for net type only)"
        },
        "apikey": {
          "type": "string",
          "description": "Apikey for the remote user, find it in user section of the remote PicamJS server (for net type only)"
        },
        "cameraId": {
          "type": "string",
          "description": "Id of the camera on the remote PicamJS server (for net type only)"
        }
      }
    },
    "Infos": {
      "type": "object",
      "properties": {
        "state":{
          "type": "string",
          "description": "Motion state",
          "enum": [
            "Running",
            "Stop"
          ]
        },
        "detectionState":{
          "type": "string",
          "description": "Motion detection state",
          "enum": [
            "Pause",
            "Active"
          ]
        },
        "lastDetection":{
          "description": "Date of last detection",
          "type": "string",
          "format": "date-time"
        },
        "startedAt":{
          "description": "Start date of motion",
          "type": "string",
          "format": "date-time"
        },
        "lastRun":{
          "description": "Date of last get on camera (historical object)",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Camera": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "local",
            "net"
          ]
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "definition": {
          "type": "object",
          "schema": {
            "$ref": "#/definitions/Definition"
          }
        },
        "infos": {
          "type": "object",
          "schema": {
            "$ref": "#/definitions/Infos"
          }
        }
      }
    },

    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Pet": {
      "type": "object",
      "required": [
        "name",
        "photoUrls"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "photoUrls": {
          "type": "array",
          "xml": {
            "name": "photoUrl",
            "wrapped": true
          },
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "xml": {
            "name": "tag",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        }
      },
      "xml": {
        "name": "Pet"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}